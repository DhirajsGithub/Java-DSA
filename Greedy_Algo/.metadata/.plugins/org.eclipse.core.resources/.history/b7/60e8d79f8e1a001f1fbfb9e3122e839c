package greedyAlgo;
import java.util.*;
public class KnapsackProblem {
	public class KnapsackItem{
		private int index;
		private int weight;
		private int value;
		private double ratio;
		
		public KnapsackItem(int index, int value, int weight) {
			this.index = index;
			this.value = value;
			this.weight = weight;
			this.ratio = value*1.0/weight;		// value to weight ratio
		}
		
		public int getIndex() {
			return this.index;
		}
		
		public int getWeight() {
			return this.weight;
		}
		
		public int getValue() {
			return this.value;
		}
		
		public double getRatio() {
			return this.ratio;
		}
		
		@Override
		public String toString() {
			return "Item index="+this.index + ", value="+this.value + ", weight="+this.weight + ", ratio="+this.ratio;
		}
	}
	
	public static void knapsackProblem(ArrayList<KnapsackItem> items, int capacity) {
		Comparator<KnapsackItem> camparator= new Comparator<KnapsackItem>() {

			@Override
			public int compare(KnapsackItem o1, KnapsackItem o2) {
				if(o1.getRatio() > o2.getRatio() ) {
					return 1;
				}
				return -1;
			};
			
		};
		
		Collections.sort(items, camparator);
		
		int usedCapacity = 0;
		double totalValue = 0;
		for(KnapsackItem item : items) {
			if(usedCapacity + item.getWeight() <= capacity) {
				usedCapacity += item.getWeight();
				System.out.println("Taken "+item);
				totalValue += item.getValue(); 
			}else {
				int usedWeight = capacity-usedCapacity;
				double value = item.getRatio()*usedWeight;
				System.out.println("Taken: item index = "+item.getIndex()+ ", obtain value = "+ value + " , used weight = "+usedWeight + " ratio="+item.getRatio());
				usedCapacity += usedWeight;
				totalValue += value;
			}
			if(usedCapacity == capacity) {
				break;
			}
		}
		System.out.println("\n Total value obtain " + totalValue);
		
	}
	
	

}
